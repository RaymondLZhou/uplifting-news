{"version":3,"sources":["logo.svg","Feed.js","App.js","Feed1.js","Sentiment.js","serviceWorker.js","index.js"],"names":["module","exports","Feed","scrollMore","scroll","feed","map","Card","style","width","className","Body","Title","title","Text","description","keywords","overall","onClick","href","link","target","rel","marginLeft","React","Component","App","id","src","logo","alt","CardColumns","positive","neutral","negative","date","to","Sentiment","Feed1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,gl4CC2D5BC,E,4MApDbC,WAAa,WACXC,gBAAOD,WAAW,M,uDAGV,IAAD,OACP,OACEE,EAAKC,KAAI,SAACD,GAAD,OACP,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAWC,UAAU,QACzC,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,CAAYF,UAAU,aAAtB,IAAoCL,EAAKQ,MAAzC,KAEA,yBAAKH,UAAU,YACf,kBAACH,EAAA,EAAKO,KAAN,CAAWJ,UAAU,mBAArB,IAAyCL,EAAKU,YAA9C,KAEA,kBAACR,EAAA,EAAKO,KAAN,oBAAwBT,EAAKW,SAA7B,KAEA,kBAACT,EAAA,EAAKO,KAAN,CAAWJ,UAAU,oBAArB,sBAA4DL,EAAKY,QAAjE,MAGA,4BACEP,UAAU,UACVQ,QAAS,EAAKf,YAFhB,YAQA,kBAACI,EAAA,EAAKO,KAAN,KACE,uBACEK,KAAMd,EAAKe,KACXV,UAAU,WACVW,OAAO,SACPC,IAAI,uBAJN,mBASA,uBACEd,MAAO,CAAEe,WAAY,QACrBJ,KAAK,UACLT,UAAU,YAHZ,yB,GAtCKc,IAAMC,WCqBVC,E,uKAnBX,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,aAAaiB,GAAG,UAChC,yBAAKC,IAAKC,IAAMnB,UAAU,WAAWoB,IAAI,SAEzC,uBAAGpB,UAAU,SAAb,oBACA,iEAEA,uBAAGA,UAAU,WAAWS,KAAK,QAAQQ,GAAG,UAAxC,eAGF,0BAAMjB,UAAU,WAAWiB,GAAG,QAC5B,kBAACI,EAAA,EAAD,CAAarB,UAAU,eAAvB,IAAsC,kBAAC,EAAD,MAAtC,W,GAdQc,IAAMC,WC4DTvB,E,4MA3DbC,WAAa,WACXC,gBAAOD,WAAW,M,uDAGV,IAAD,OACP,OACEE,EAAKC,KAAI,SAACD,GAAD,OACP,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAWC,UAAU,QACzC,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,CAAYF,UAAU,aAAtB,IAAoCL,EAAKQ,MAAzC,KAEA,yBAAKH,UAAU,YACf,kBAACH,EAAA,EAAKO,KAAN,CAAWJ,UAAU,oBAArB,mBAAyDL,EAAKY,QAA9D,KACA,kBAACV,EAAA,EAAKO,KAAN,yBAA6BT,EAAK2B,SAAlC,KACA,kBAACzB,EAAA,EAAKO,KAAN,wBAA4BT,EAAK4B,QAAjC,KACA,kBAAC1B,EAAA,EAAKO,KAAN,CAAWJ,UAAU,qBAArB,oBAA2DL,EAAK6B,SAAhE,MAGA,kBAAC3B,EAAA,EAAKO,KAAN,SAAaT,EAAK8B,KAAlB,KAEA,kBAAC,IAAD,CAAMC,GAAG,KACP,4BAAQ1B,UAAU,UAAlB,iBAKF,4BACEA,UAAU,UACVQ,QAAS,EAAKf,WACdK,MAAO,CAAEe,WAAY,SAHvB,YAQA,kBAAChB,EAAA,EAAKO,KAAN,KACE,uBACEK,KAAMd,EAAKe,KACXV,UAAU,WACVW,OAAO,SACPC,IAAI,uBAJN,mBASA,uBACEd,MAAO,CAAEe,WAAY,QACrBJ,KAAK,UACLT,UAAU,YAHZ,yB,GA7CKc,IAAMC,WCqBVY,E,uKAnBX,OACE,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,aAAaiB,GAAG,UAChC,yBAAKC,IAAKC,IAAMnB,UAAU,WAAWoB,IAAI,SAEzC,uBAAGpB,UAAU,SAAb,oBACA,iEAEA,uBAAGA,UAAU,WAAWS,KAAK,QAAQQ,GAAG,UAAxC,eAGF,0BAAMjB,UAAU,WAAWiB,GAAG,QAC5B,kBAACI,EAAA,EAAD,CAAarB,UAAU,eAAvB,IAAsC,kBAAC4B,EAAD,MAAtC,W,GAdcd,IAAMC,WCMVc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,UAKRC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.635f4ab8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\n//import { Link } from 'react-router-dom'\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport Card from 'react-bootstrap/Card'\r\nimport feed from './data/displayFeed.json'\r\n\r\nclass Feed extends React.Component {\r\n  scrollMore = () => {\r\n    scroll.scrollMore(635);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      feed.map((feed) => (\r\n        <Card style={{ width: '23rem' }} className=\"card\">\r\n          <Card.Body>\r\n            <Card.Title className=\"cardTitle\"> {feed.title} </Card.Title>      \r\n\r\n            <div className=\"cardBody\">\r\n            <Card.Text className=\"cardDescription\"> {feed.description} </Card.Text>  \r\n\r\n            <Card.Text> Key words: {feed.keywords} </Card.Text>\r\n\r\n            <Card.Text className=\"cardOverallScore\"> Positivity Score: {feed.overall} </Card.Text> \r\n            </div>\r\n\r\n            <button \r\n              className=\"button1\"\r\n              onClick={this.scrollMore}\r\n              //style={{ marginLeft: '8rem' }}\r\n            >\r\n                See More\r\n            </button>    \r\n\r\n            <Card.Text>\r\n              <a \r\n                href={feed.link} \r\n                className=\"App-link\" \r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                  Link to Article\r\n              </a>\r\n          \r\n              <a\r\n                style={{ marginLeft: '6rem' }} \r\n                href=\"#header\" \r\n                className=\"App-link\" \r\n              >\r\n                  Back to Top\r\n              </a>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      ))\r\n    )\r\n  }\r\n}\r\n\r\nexport default Feed\r\n","import React from 'react'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\nimport Feed from './Feed.js'\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\" id=\"header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n\r\n          <p className=\"title\"> Uplifting News </p>\r\n          <p> See the most positive news first </p>\r\n\r\n          <a className=\"App-link\" href=\"#body\" id=\"spaces\"> See News </a>\r\n        </header>\r\n\r\n        <body className=\"App-body\" id=\"body\">\r\n          <CardColumns className=\"cardColumns\"> <Feed/> </CardColumns>\r\n        </body>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport Card from 'react-bootstrap/Card'\r\nimport feed from './data/displayFeed.json'\r\n\r\nclass Feed extends React.Component {\r\n  scrollMore = () => {\r\n    scroll.scrollMore(634);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      feed.map((feed) => (\r\n        <Card style={{ width: '23rem' }} className=\"card\">\r\n          <Card.Body>\r\n            <Card.Title className=\"cardTitle\"> {feed.title} </Card.Title>      \r\n\r\n            <div className=\"cardBody\">\r\n            <Card.Text className=\"cardOverallScore\"> Overall Score: {feed.overall} </Card.Text> \r\n            <Card.Text> Positive Score: {feed.positive} </Card.Text> \r\n            <Card.Text> Neutral Score: {feed.neutral} </Card.Text> \r\n            <Card.Text className=\"cardNegativeScore\"> Negative Score: {feed.negative} </Card.Text> \r\n            </div>\r\n\r\n            <Card.Text> {feed.date} </Card.Text>\r\n\r\n            <Link to=\"/\">\r\n              <button className=\"button\">\r\n                See Keywords\r\n              </button>\r\n            </Link>    \r\n\r\n            <button \r\n              className=\"button1\"\r\n              onClick={this.scrollMore}\r\n              style={{ marginLeft: '6rem' }}\r\n            >\r\n              See More\r\n            </button>    \r\n\r\n            <Card.Text>\r\n              <a \r\n                href={feed.link} \r\n                className=\"App-link\" \r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                  Link to Article\r\n              </a>\r\n          \r\n              <a\r\n                style={{ marginLeft: '6rem' }} \r\n                href=\"#header\" \r\n                className=\"App-link\" \r\n              >\r\n                  Back to Top\r\n              </a>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      ))\r\n    )\r\n  }\r\n}\r\n\r\nexport default Feed\r\n","import React from 'react'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\nimport Feed1 from './Feed1.js'\r\n\r\nclass Sentiment extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\" id=\"header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n\r\n          <p className=\"title\"> Uplifting News </p>\r\n          <p> See the most positive news first </p>\r\n\r\n          <a className=\"App-link\" href=\"#body\" id=\"spaces\"> See News </a>\r\n        </header>\r\n\r\n        <body className=\"App-body\" id=\"body\">\r\n          <CardColumns className=\"cardColumns\"> <Feed1/> </CardColumns>\r\n        </body>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sentiment\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport Sentiment from './Sentiment.js'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <App/>\r\n        </Route>\r\n        <Route path=\"/sentiment\">\r\n          <Sentiment/>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}