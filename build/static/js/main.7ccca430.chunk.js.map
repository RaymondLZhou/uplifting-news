{"version":3,"sources":["logo.svg","App.js","SecondPage.js","serviceWorker.js","index.js"],"names":["module","exports","display","feed","map","Card","style","width","className","Body","Title","title","Text","description","date","href","link","target","rel","marginLeft","App","src","logo","alt","to","CardColumns","SecondPage","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,6tlBCQrCC,EAAUC,EAAKC,KAAI,SAACD,GACxB,OACE,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAWC,UAAU,QACzC,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,KACGP,EAAKQ,OAGR,kBAACN,EAAA,EAAKO,KAAN,KACGT,EAAKU,aAGR,kBAACR,EAAA,EAAKO,KAAN,KACGT,EAAKW,MAGR,kBAACT,EAAA,EAAKO,KAAN,KACE,uBACEG,KAAMZ,EAAKa,KACXR,UAAU,WACVS,OAAO,SACPC,IAAI,uBAJN,mBASA,uBACEZ,MAAO,CAAEa,WAAY,QACrBJ,KAAK,KACLP,UAAU,WACVU,IAAI,uBAJN,qBAoCKE,MArBf,WACE,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKa,IAAKC,IAAMd,UAAU,WAAWe,IAAI,SACzC,6CAIA,kBAAC,IAAD,CAAMC,GAAG,gBACP,4BAAQhB,UAAU,UAAlB,wBAKF,kBAACiB,EAAA,EAAD,CAAajB,UAAU,cAAvB,IAAsCN,EAAtC,QC9BOwB,MA7Bf,WACE,OACE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKa,IAAKC,IAAMd,UAAU,WAAWe,IAAI,SAEzC,qDAIA,uBACEf,UAAU,WACVO,KAAK,sBACLE,OAAO,SACPC,IAAI,uBAJN,eASA,kBAAC,IAAD,CAAMM,GAAG,KACP,4BAAQhB,UAAU,SAASmB,GAAG,UAA9B,0BCbUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAAC,EAAD,UAKRC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ccca430.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport feed from './scraper/feed.json'\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\n\r\nconst display = feed.map((feed) => {\r\n  return (\r\n    <Card style={{ width: '23rem' }} className=\"card\">\r\n      <Card.Body>\r\n        <Card.Title> \r\n          {feed.title} \r\n        </Card.Title>\r\n        \r\n        <Card.Text>\r\n          {feed.description}\r\n        </Card.Text>\r\n\r\n        <Card.Text>\r\n          {feed.date}\r\n        </Card.Text>\r\n\r\n        <Card.Text>\r\n          <a \r\n            href={feed.link} \r\n            className=\"App-link\" \r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n              Link to Article\r\n          </a>\r\n       \r\n          <a\r\n            style={{ marginLeft: '6rem' }} \r\n            href=\"/#\" \r\n            className=\"App-link\" \r\n            rel=\"noopener noreferrer\"\r\n          >\r\n              Back to Top\r\n          </a>\r\n        </Card.Text>\r\n\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n})\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n        <p>\r\n          Uplifting News\r\n        </p>\r\n\r\n        <Link to=\"/second-page\">\r\n          <button className=\"button\">\r\n           Link to Second Page\r\n          </button>\r\n        </Link>\r\n\r\n        <CardColumns className=\"cardColumn\"> {display} </CardColumns>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\n\r\nfunction SecondPage() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n        <p>\r\n          This is a Second Page!\r\n        </p>\r\n\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n\r\n        <Link to=\"/\">\r\n          <button className=\"button\" id=\"spaces\">\r\n           Link to First Page\r\n          </button>\r\n        </Link>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SecondPage\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport SecondPage from './SecondPage'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <App />\n        </Route>\n        <Route path=\"/second-page\">\n          <SecondPage />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}