{"version":3,"sources":["logo.svg","Feed.js","App.js","Feed1.js","Sentiment.js","serviceWorker.js","index.js"],"names":["module","exports","Feed","feed","map","Card","style","width","className","Body","Title","title","Text","overall","positive","neutral","negative","date","href","link","target","rel","marginLeft","React","Component","App","id","src","logo","alt","to","CardColumns","Feed1","description","keywords","Sentiment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1f150245.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport feed from './data/displayFeed.json'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nclass Feed extends React.Component {\r\n  render() {\r\n    return (\r\n      feed.map((feed) => (\r\n        <Card style={{ width: '23rem' }} className=\"card\">\r\n          <Card.Body>\r\n            <Card.Title className=\"cardTitle\"> {feed.title} </Card.Title>      \r\n\r\n            <div className=\"cardBody\">\r\n            <Card.Text className=\"cardOverallScore\"> Overall Score: {feed.overall} </Card.Text> \r\n            <Card.Text> Positive Score: {feed.positive} </Card.Text> \r\n            <Card.Text> Neutral Score: {feed.neutral} </Card.Text> \r\n            <Card.Text className=\"cardNegativeScore\"> Negative Score: {feed.negative} </Card.Text> \r\n            </div>\r\n\r\n            <Card.Text> {feed.date} </Card.Text>      \r\n\r\n            <Card.Text>\r\n              <a \r\n                href={feed.link} \r\n                className=\"App-link\" \r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                  Link to Article\r\n              </a>\r\n          \r\n              <a\r\n                style={{ marginLeft: '6rem' }} \r\n                href=\"#header\" \r\n                className=\"App-link\" \r\n              >\r\n                  Back to Top\r\n              </a>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      ))\r\n    )\r\n  }\r\n}\r\n\r\nexport default Feed\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\nimport Feed from './Feed.js'\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\" id=\"header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n          <p> Uplifting News </p>\r\n\r\n          <Link to=\"/sentiment\">\r\n            <button className=\"button\">\r\n             Link to Second Page\r\n            </button>\r\n          </Link>\r\n\r\n          <a className=\"App-link\" href=\"#body\" id=\"spaces\"> See News </a>\r\n        </header>\r\n\r\n        <body className=\"App-body\" id=\"body\">\r\n          <CardColumns className=\"cardColumns\"> <Feed/> </CardColumns>\r\n        </body>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport feed from './data/displayFeed.json'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nclass Feed1 extends React.Component {\r\n  render() {\r\n    return (\r\n      feed.map((feed) => (\r\n        <Card style={{ width: '23rem' }} className=\"card\">\r\n          <Card.Body>\r\n            <Card.Title className=\"cardTitle\"> {feed.title} </Card.Title>     \r\n            \r\n            <div className=\"cardBody\">\r\n            <Card.Text className=\"cardDescription\"> {feed.description} </Card.Text>  \r\n\r\n            <Card.Text> Key words: {feed.keywords} </Card.Text>\r\n            </div>\r\n\r\n            <Card.Text> {feed.date} </Card.Text>      \r\n\r\n            <Card.Text>\r\n              <a \r\n                href={feed.link} \r\n                className=\"App-link\" \r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                  Link to Article\r\n              </a>\r\n          \r\n              <a\r\n                style={{ marginLeft: '6rem' }} \r\n                href=\"#header\" \r\n                className=\"App-link\" \r\n              >\r\n                  Back to Top\r\n              </a>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      ))\r\n    )\r\n  }\r\n}\r\n\r\nexport default Feed1\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\nimport Feed1 from './Feed1.js'\r\n\r\nclass Sentiment extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\" id=\"header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p> Uplifting News </p>\r\n          \r\n          <Link to=\"/\">\r\n            <button className=\"button\">\r\n             Link to First Page\r\n            </button>\r\n          </Link>\r\n\r\n          <a className=\"App-link\" href=\"#body\" id=\"spaces\"> See News </a>\r\n        </header>\r\n\r\n        <body className=\"App-body\" id=\"body\">\r\n          <CardColumns className=\"cardColumns\"> <Feed1/> </CardColumns>\r\n        </body>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sentiment\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport Sentiment from './Sentiment.js'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <App/>\n        </Route>\n        <Route path=\"/sentiment\">\n          <Sentiment/>\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}